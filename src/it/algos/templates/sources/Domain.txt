package it.algos.@LOWERPROGETTO@.@LOWERNAME@;

import it.algos.web.entity.BaseEntity;
import it.algos.web.query.AQuery;

import java.util.ArrayList;
import javax.persistence.Entity;
import org.apache.commons.beanutils.BeanUtils;
import org.hibernate.validator.constraints.NotEmpty;

@Entity
public class @NAME@ extends BaseEntity {

	@NotEmpty
	private String nome = "";

	public @NAME@() {
		this("");
	}// end of constructor

	public @NAME@(String nome) {
		super();
		this.setNome(nome);
	}// end of constructor

	@Override
	public String toString() {
		return nome;
	}// end of method

	/**
	 * @return the nome
	 */
	public String getNome() {
		return nome;
	}

	/**
	 * @param nome
	 *            the nome to set
	 */
	public void setNome(String nome) {
		this.nome=nome;
	}

	/**
	 * Recupera una istanza di @NAME@ usando la query specifica
	 *
	 * @return istanza di @NAME@, null se non trovata
	 */
	public static @NAME@ find(long id) {
		@NAME@ instance = null;
		BaseEntity entity = AQuery.queryById(@NAME@.class, id);

		if (entity != null) {
			if (entity instanceof @NAME@) {
				instance = (@NAME@) entity;
			}// end of if cycle
		}// end of if cycle

		return instance;
	}// end of method

	/**
	 * Recupera una istanza di @NAME@ usando la query specifica
	 *
	 * @return istanza di @NAME@, null se non trovata
	 */
	public static @NAME@ find(String nome) {
		@NAME@ instance = null;
		BaseEntity entity = AQuery.queryOne(@NAME@.class, @NAME@_.nome, nome);

		if (entity != null) {
			if (entity instanceof @NAME@) {
				instance = (@NAME@) entity;
			}// end of if cycle
		}// end of if cycle

		return instance;
	}// end of method

    public synchronized static int count() {
        int totRec = 0;
        long totTmp = AQuery.getCount(@NAME@.class);

        if (totTmp > 0) {
            totRec = (int) totTmp;
        }// fine del blocco if

        return totRec;
    }// end of method

    public synchronized static ArrayList<@NAME@> findAll() {
        return (ArrayList<@NAME@>) AQuery.getList(@NAME@.class);
    }// end of method

     @Override
     public @NAME@ clone() throws CloneNotSupportedException {
        try {
            return (@NAME@) BeanUtils.cloneBean(this);
        } catch (Exception ex) {
            throw new CloneNotSupportedException();
        }// fine del blocco try-catch
	}// end of method

}// end of entity class
