package it.algos.@LOWERPROGETTO@.@LOWERNAME@;

import it.algos.webbase.web.entity.BaseEntity;
import it.algos.webbase.web.query.AQuery;
import org.apache.commons.beanutils.BeanUtils;
import org.eclipse.persistence.annotations.Index;
import org.hibernate.validator.constraints.NotEmpty;

import javax.persistence.Column;
import javax.persistence.Entity;
import java.util.ArrayList;

/**
 * Classe di tipo JavaBean.
 * <p>
 * 1) la classe deve avere un costruttore senza argomenti
 * 2) le proprietà devono essere private e accessibili solo con get, set e is (usato per i boolena al posto di get)
 * 3) la classe deve implementare l'interfaccia Serializable (la fa nella superclasse)
 * 4) la classe non deve contenere nessun metodo per la gestione degli eventi
 */
@Entity
public class @NAME@ extends BaseEntity {

    private static final long serialVersionUID = 1L;

	@NotEmpty
    @Column(length = 20)
    @Index
	private String sigla = "";

    /**
     * Costruttore senza argomenti
     * Necessario per le specifiche JavaBean
     */
	public @NAME@() {
		this("");
    }// end of constructor

    /**
     * Costruttore completo
     *
     * @param sigla
     */
	public @NAME@(String sigla) {
		super();
		this.setSigla(sigla);
	}// end of general constructor

    /**
     * Recupera una istanza di @NAME@ usando la query standard della Primary Key
     *
     * @param id valore della Primary Key
     * @return istanza di @NAME@, null se non trovata
     */
	public static @NAME@ find(long id) {
		@NAME@ instance = null;
		BaseEntity entity = AQuery.queryById(@NAME@.class, id);

		if (entity != null) {
			if (entity instanceof @NAME@) {
				instance = (@NAME@) entity;
			}// end of if cycle
		}// end of if cycle

		return instance;
	}// end of method

    /**
     * Recupera una istanza di @NAME@ usando la query di una property specifica
     *
     * @param sigla valore della property Sigla
     * @return istanza di @NAME@, null se non trovata
     */
	public static @NAME@ findByv(String sigla) {
		@NAME@ instance = null;
		BaseEntity entity = AQuery.queryOne(@NAME@.class, @NAME@_.sigla, sigla);

		if (entity != null) {
			if (entity instanceof @NAME@) {
				instance = (@NAME@) entity;
			}// end of if cycle
		}// end of if cycle

		return instance;
	}// end of method

    /**
     * Recupera il valore del numero totale di records della della Entity
     *
     * @return numero totale di records della tavola
     */
    public static int count() {
        int totRec = 0;
        long totTmp = AQuery.getCount(@NAME@.class);

        if (totTmp > 0) {
            totRec = (int) totTmp;
        }// fine del blocco if

        return totRec;
    }// end of method

    /**
     * Recupera una lista (array) di tutti i records della Entity
     *
     * @return lista di tutte le istanze di @NAME@
     */
    @SuppressWarnings("unchecked")
    public static ArrayList<@NAME@> findAll() {
        return (ArrayList<@NAME@>) AQuery.getLista(@NAME@.class);
    }// end of method

    @Override
    public String toString() {
        return sigla;
    }// end of method

    /**
     * @return the sigla
     */
    public String getSigla() {
        return sigla;
    }// end of getter method

    /**
     * @param sigla the sigla to set
     */
    public void setSigla(String sigla) {
        this.sigla = sigla;
    }// end of setter method


    /**
     * Clone di questa istanza
     * Una DIVERSA istanza (indirizzo di memoria) con gi STESSI valori (property)
     * È obbligatoria invocare questo metodo all'interno di un codice try/catch
     *
     * @return nuova istanza di @NAME@ con gli stessi valori dei parametri di questa istanza
     */
    @Override
    @SuppressWarnings("all")
    public @NAME@ clone() throws CloneNotSupportedException {
        try {
            return (@NAME@) BeanUtils.cloneBean(this);
        } catch (Exception ex) {
            throw new CloneNotSupportedException();
        }// fine del blocco try-catch
    }// end of method

}// end of domain class
